/*
Most files in FFmpeg are under the GNU Lesser General Public License version 2.1
or later (LGPL v2.1+). Read the file COPYING.LGPLv2.1 for details. Some other
files have MIT/X11/BSD-style licenses. In combination the LGPL v2.1+ applies to
FFmpeg.

The source code used to build this file can be obtained at https://github.com/bgrins/videoconverter.js,
and in zip form at https://github.com/bgrins/videoconverter.js/archive/master.zip
*/

function ffmpeg_run(opts) {
  var isNode = typeof(exports) !== 'undefined';
  if (!isNode) {
    var Module = {
      'outputDirectory': 'output'
    };
    for (var i in opts) {
      Module[i] = opts[i];
    }
    var outputFilePath = Module['arguments'][Module['arguments'].length - 1];
    if (Module['arguments'].length > 2 && outputFilePath && outputFilePath.indexOf(".") > -1) {
      Module['arguments'][Module['arguments'].length - 1] = "output/" + outputFilePath;
    }
    Module['preRun'] = function() {
      FS.createFolder('/', Module['outputDirectory'], true, true);
      /* fileData / fileName is deprecated - please use file.name and file.data instead */
      if (Module['fileData']) {
        FS.createDataFile('/', Module['fileName'], Module['fileData'], true, true);
      }
      if (Module['files']) {
        Module['files'].forEach(function(file) {
          FS.createDataFile('/', file.name, file.data, true, true);
        });
      }
    };
    Module['postRun'] = function() {
      var handle = FS.analyzePath(Module['outputDirectory']);
      Module['return'] = getAllBuffers(handle);
    };
    function getAllBuffers(result) {
      var buffers = [];
      if (result && result.object && result.object.contents) {
        for (var i in result.object.contents) {
          if (result.object.contents.hasOwnProperty(i)) {
            buffers.push({
              name: i,
              data: new Uint8Array(result.object.contents[i].contents).buffer
            });
          }
        }
      }
      return buffers;
    }
  }
// Note: For maximum-speed code, see "Optimizing Code" on the Emscripten wiki, https://github.com/kripken/emscripten/wiki/Optimizing-Code
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    this['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (vararg) return 8;
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    code = Pointer_stringify(code);
    if (code[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (code.indexOf('"', 1) === code.length-1) {
        code = code.substr(1, code.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + code + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    return Runtime.asmConstCache[code] = eval('(function(' + args.join(',') + '){ ' + code + ' })'); // new Function does not allow upvars in node
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    return rawList ? list : ret + flushList();
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 33554432;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 9218304;


/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } });

















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































var _stdout;
var _stdout=_stdout=allocate(1, "i32*", ALLOC_STATIC);


var _stderr;
var _stderr=_stderr=allocate(1, "i32*", ALLOC_STATIC);












































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































/* memory initializer */ allocate([0,9,17,18,12,40,27,7,35,57,29,30,58,38,53,47,1,2,24,11,19,48,20,14,42,50,22,37,59,31,60,55,8,3,32,4,26,41,13,21,49,43,15,44,52,39,61,62,16,10,25,5,33,34,6,28,56,36,23,51,45,46,54,63,0,0,0,0,0,0,0,0,0,1,4,8,5,2,3,6,9,12,13,10,7,11,14,15,0,1,4,8,5,2,3,6,9,12,13,10,7,11,14,15,0,0,0,0,0,0,0,0,0,1,4,8,5,2,3,6,9,12,13,10,7,11,14,15,0,0,0,0,0,0,0,0,0,1,4,8,5,2,3,6,9,12,13,10,7,11,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,10,0,0,0,1,0,0,0,2,0,0,0,128,2,128,2,157,2,224,1,196,2,98,1,236,2,1,1,24,3,198,0,248,2,143,0,40,3,101,0,4,3,72,0,224,1,157,2,25,2,25,2,86,2,160,1,149,2,60,1,207,2,250,0,195,2,185,0,0,3,134,0,233,2,97,0,98,1,196,2,160,1,86,2,232,1,232,1,52,2,132,1,122,2,61,1,130,2,241,0,204,2,179,0,194,2,132,0,1,1,236,2,60,1,149,2,132,1,52,2,213,1,213,1,31,2,139,1,59,2,55,1,143,2,238,0,148,2,180,0,198,0,24,3,250,0,207,2,61,1,122,2,139,1,31,2,213,1,213,1,251,1,124,1,85,2,43,1,104,2,231,0,161,0,87,3,206,0,20,3,10,1,198,2,84,1,111,2,155,1,36,2,199,1,199,1,36,2,110,1,64,2,32,1,122,0,204,3,159,0,146,3,211,0,74,3,20,1,246,2,85,1,170,2,133,1,72,2,227,1,227,1,8,2,134,1,110,0,148,4,144,0,83,4,193,0,4,4,254,0,164,3,61,1,78,3,110,1,219,2,202,1,99,2,243,1,243,1,64,1,0,0,12,0,0,0,13,0,0,0,14,0,0,0,34,0,0,0,255,255,255,255,6,0,0,0,7,0,0,0,35,0,0,0,0,0,0,0,4,0,0,0,44,1,0,0,33,0,0,0,5,0,0,0,43,1,0,0,70,0,0,0,80,0,0,0,76,0,0,0,92,0,0,0,94,0,0,0,96,0,0,0,72,0,0,0,74,0,0,0,78,0,0,0,98,0,0,0,100,0,0,0,102,0,0,0,46,1,0,0,50,1,0,0,54,1,0,0,48,1,0,0,52,1,0,0,56,1,0,0,54,0,0,0,56,0,0,0,58,0,0,0,104,0,0,0,106,0,0,0,108,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,33,0,0,0,35,0,0,0,44,1,0,0,43,1,0,0,14,0,0,0,13,0,0,0,12,0,0,0,34,0,0,0,255,255,255,255,219,16,138,255,0,0,0,0,208,3,0,0,192,3,0,0,176,3,0,0,160,3,0,0,0,0,0,0,0,0,0,0,0,0,252,255,4,0,240,255,16,0,220,255,36,0,176,255,4,0,250,255,20,0,236,255,46,0,210,255,94,0,162,255,0,0,254,255,4,0,250,255,8,0,244,255,12,0,244,255,0,0,254,255,2,0,250,255,6,0,244,255,12,0,244,255,192,252,32,0,24,232,31,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,64,16,0,1,0,192,252,32,0,24,25,31,0,136,107,30,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,193,0,0,192,255,255,255,223,65,16,0,1,0,192,252,32,0,32,227,29,0,144,118,29,0,0,0,0,0,128,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,224,193,0,0,192,255,255,255,223,65,16,0,1,0,192,252,32,0,144,31,29,0,16,206,28,0,0,0,0,0,128,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,224,193,0,0,192,255,255,255,223,65,16,0,1,0,192,252,32,0,224,202,35,0,96,118,35,0,0,0,0,0,128,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,224,193,0,0,192,255,255,255,223,65,16,0,1,0,192,252,32,0,136,28,35,0,184,215,34,0,8,0,0,0,1,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,63,16,0,1,0,136,28,35,0,0,156,34,0,144,95,34,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,193,0,0,192,255,255,255,223,65,16,0,1,0,136,28,35,0,16,40,34,0,8,248,33,0,0,0,0,0,128,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,224,193,0,0,192,255,255,255,223,65,16,0,1,0,136,28,35,0,0,207,33,0,160,167,33,0,0,0,0,0,128,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,224,193,0,0,192,255,255,255,223,65,16,0,1,0,136,28,35,0,32,138,33,0,0,97,33,0,12,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,16,0,1,0,32,138,33,0,0,35,33,0,0,0,33,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,193,0,0,192,255,255,255,223,65,16,0,1,0,32,138,33,0,216,229,32,0,176,202,32,0,0,0,0,0,128,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,224,193,0,0,192,255,255,255,223,65,16,0,1,0,32,138,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,203,31,0,108,0,0,0,224,3,0,0,100,66,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,12,0,0,0,15,0,0,0,20,0,0,0,25,0,0,0,34,0,0,0,46,0,0,0,64,0,0,0,82,0,0,0,94,0,0,0,103,0,0,0,108,0,0,0,113,0,0,0,116,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,32,17,17,9,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,8,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,7,0,0,0,6,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,14,0,0,0,13,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,13,0,0,0,24,0,0,0,4,0,0,0,11,0,0,0,4,0,0,0,28,0,0,0,25,0,0,0,4,0,0,0,6,0,0,0,6,0,0,0,26,0,0,0,48,0,0,0,5,0,0,0,22,0,0,0,8,0,0,0,56,0,0,0,50,0,0,0,5,0,0,0,12,0,0,0,12,0,0,0,52,0,0,0,96,0,0,0,6,0,0,0,44,0,0,0,16,0,0,0,112,0,0,0,100,0,0,0,6,0,0,0,24,0,0,0,24,0,0,0,104,0,0,0,192,0,0,0,7,0,0,0,88,0,0,0,32,0,0,0,224,0,0,0,200,0,0,0,7,0,0,0,48,0,0,0,48,0,0,0,208,0,0,0,128,1,0,0,8,0,0,0,176,0,0,0,64,0,0,0,192,1,0,0,144,1,0,0,8,0,0,0,96,0,0,0,96,0,0,0,160,1,0,0,0,3,0,0,9,0,0,0,96,1,0,0,128,0,0,0,128,3,0,0,32,3,0,0,9,0,0,0,192,0,0,0,192,0,0,0,64,3,0,0,0,6,0,0,10,0,0,0,192,2,0,0,0,1,0,0,0,7,0,0,64,6,0,0,10,0,0,0,128,1,0,0,128,1,0,0,128,6,0,0,0,12,0,0,11,0,0,0,128,5,0,0,0,2,0,0,0,14,0,0,128,12,0,0,11,0,0,0,0,3,0,0,0,3,0,0,0,13,0,0,0,24,0,0,12,0,0,0,0,11,0,0,0,4,0,0,0,28,0,0,0,25,0,0,12,0,0,0,0,6,0,0,0,6,0,0,0,26,0,0,0,48,0,0,13,0,0,0,0,22,0,0,0,8,0,0,0,56,0,0,0,50,0,0,13,0,0,0,0,12,0,0,0,12,0,0,0,52,0,0,0,96,0,0,14,0,0,0,0,44,0,0,0,16,0,0,0,112,0,0,0,100,0,0,14,0,0,0,0,24,0,0,0,24,0,0,0,104,0,0,0,192,0,0,15,0,0,0,0,88,0,0,0,32,0,0,0,224,0,0,0,200,0,0,15,0,0,0,0,48,0,0,0,48,0,0,0,208,0,0,0,128,1,0,16,0,0,0,0,176,0,0,0,64,0,0,0,192,1,0,0,144,1,0,16,0,0,0,0,96,0,0,0,96,0,0,0,160,1,0,0,0,3,0,17,0,0,0,0,96,1,0,0,128,0,0,0,128,3,0,0,32,3,0,17,0,0,0,0,192,0,0,0,192,0,0,0,64,3,0,0,0,6,0,18,0,0,0,0,192,2,0,0,0,1,0,0,0,7,0,0,64,6,0,18,0,0,0,0,128,1,0,0,128,1,0,0,128,6,0,0,0,12,0,19,0,0,0,0,128,5,0,0,0,2,0,0,0,14,0,0,128,12,0,19,0,0,0,0,0,3,0,0,0,3,0,0,0,13,0,0,0,24,0,20,0,0,0,0,0,11,0,0,0,4,0,0,0,28,0,0,0,25,0,20,0,0,0,0,0,6,0,0,0,6,0,0,0,26,0,0,0,48,0,21,0,0,0,0,0,22,0,0,0,8,0,0,0,56,0,0,0,50,0,21,0,0,0,0,0,12,0,0,0,12,0,0,0,52,0,0,0,96,0,22,0,0,0,0,0,44,0,0,0,16,0,0,0,112,0,0,0,100,0,22,0,0,0,0,0,24,0,0,0,24,0,0,0,104,0,0,0,192,0,23,0,0,0,0,0,88,0,0,0,32,0,0,0,224,0,0,0,200,0,23,0,0,0,0,0,48,0,0,0,48,0,0,0,208,0,0,0,128,1,24,0,0,0,0,0,176,0,0,0,64,0,0,0,192,1,0,0,144,1,24,0,0,0,0,0,96,0,0,0,96,0,0,0,160,1,0,0,0,3,25,0,0,0,0,0,96,1,0,0,128,0,0,0,128,3,0,0,32,3,25,0,0,0,0,0,192,0,0,0,192,0,0,0,64,3,0,0,0,6,26,0,0,0,0,0,192,2,0,0,0,1,0,0,0,7,0,0,64,6,26,0,0,0,0,0,128,1,0,0,128,1,0,0,128,6,0,0,0,12,0,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,115,0,0,0,204,255,255,255,98,0,0,0,201,255,255,255,122,0,0,0,196,255,255,255,51,51,243,64,102,102,102,64,205,204,140,64,205,204,108,64,51,51,195,64,51,51,163,64,51,51,19,64,205,204,204,63,102,102,198,64,0,0,192,63,102,102,230,63,154,153,153,63,0,0,0,0,0,0,0,0,64,2,36,2,70,2,106,2,34,2,104,2,48,2,130,2,72,2,70,2,192,2,152,2,0,2,32,2,144,2,128,2,0,2,136,2,70,2,54,2,20,2,102,2,84,2,136,2,74,2,40,2,72,2,78,2,32,2,66,2,72,2,112,2,16,2,16,2,14,2,16,2,24,2,16,2,14,2,32,2,32,2,0,2,0,2,16,2,16,2,32,2,0,2,32,2,128,0,128,0,128,0,128,0,128,0,128,0,0,0,0,0,0,8,4,10,11,2,6,9,1,3,5,7,4,0,8,11,10,3,5,2,6,9,1,7,8,0,4,10,11,1,7,2,6,9,3,5,0,0,0,0,0,0,1,0,4,0,3,0,5,0,3,0,12,0,4,0,13,0,4,0,56,0,6,0,29,0,5,0,57,0,6,0,60,0,6,0,61,0,6,0,62,0,6,0,63,0,6,0,0,0,5,0,1,0,5,0,2,0,5,0,1,0,2,0,2,0,2,0,2,0,4,0,3,0,5,0,6,0,3,0,3,0,4,0,14,0,4,0,30,0,5,0,31,0,5,0,0,0,2,0,1,0,2,0,4,0,3,0,5,0,3,0,6,0,3,0,56,0,6,0,57,0,6,0,29,0,5,0,60,0,6,0,61,0,6,0,62,0,6,0,63,0,6,0,0,0,3,0,2,0,4,0,3,0,4,0,1,0,2,0,2,0,2,0,24,0,5,0,25,0,5,0,13,0,4,0,28,0,5,0,29,0,5,0,30,0,5,0,31,0,5,0,0,0,2,0,1,0,2,0,4,0,3,0,5,0,3,0,6,0,3,0,56,0,6,0,29,0,5,0,57,0,6,0,60,0,6,0,61,0,6,0,62,0,6,0,63,0,6,0,0,0,1,0,2,0,2,0,6,0,3,0,28,0,5,0,29,0,5,0,120,0,7,0,61,0,6,0,121,0,7,0,124,0,7,0,125,0,7,0,126,0,7,0,127,0,7,0,34,50,51,83,35,66,67,99,36,82,52,115,37,98,68,131,38,114,53,84,39,130,69,100,40,146,54,116,41,162,70,132,0,0,5,0,1,0,4,0,1,0,5,0,4,0,5,0,5,0,5,0,6,0,5,0,14,0,6,0,15,0,6,0,64,0,8,0,65,0,8,0,64,8,13,0,65,8,13,0,66,8,13,0,67,8,13,0,68,8,13,0,69,8,13,0,70,8,13,0,2,0,2,0,3,0,2,0,3,0,3,0,5,0,4,0,9,0,5,0,17,0,6,0,67,0,8,0,133,0,9,0,71,8,13,0,72,8,13,0,73,8,13,0,74,8,13,0,75,8,13,0,76,8,13,0,77,8,13,0,78,8,13,0,79,8,13,0,0,0,4,0,1,0,3,0,2,0,3,0,1,0,4,0,6,0,4,0,4,0,3,0,7,0,4,0,5,0,3,0,12,0,4,0,13,0,4,0,28,0,5,0,58,0,6,0,216,1,9,0,217,1,9,0,160,29,13,0,161,29,13,0,162,29,13,0,60,0,6,0,61,0,6,0,62,0,6,0,119,0,7,0,219,1,9,0,126,0,7,0,254,0,8,0,254,1,9,0,163,29,13,0,164,29,13,0,165,29,13,0,211,14,12,0,212,14,12,0,255,1,9,0,213,14,12,0,214,14,12,0,215,14,12,0,0,0,4,0,1,0,3,0,2,0,3,0,1,0,4,0,6,0,4,0,7,0,4,0,8,0,4,0,9,0,4,0,40,0,6,0,41,0,6,0,84,0,7,0,85,0,7,0,192,10,12,0,193,10,12,0,194,10,12,0,195,10,12,0,196,10,12,0,11,0,4,0,6,0,3,0,14,0,4,0,30,0,5,0,62,0,6,0,63,0,6,0,87,0,7,0,173,0,8,0,197,10,12,0,198,10,12,0,199,10,12,0,200,10,12,0,201,10,12,0,202,10,12,0,203,10,12,0,102,5,11,0,103,5,11,0,0,0,4,0,1,0,2,0,1,0,3,0,4,0,3,0,5,0,3,0,6,0,3,0,1,0,4,0,14,0,4,0,60,0,6,0,61,0,6,0,124,0,7,0,250,0,8,0,192,62,14,0,193,62,14,0,194,62,14,0,195,62,14,0,98,31,13,0,247,1,9,0,126,0,7,0,254,0,8,0,255,0,8,0,99,31,13,0,100,31,13,0,101,31,13,0,102,31,13,0,103,31,13,0,104,31,13,0,105,31,13,0,106,31,13,0,107,31,13,0,108,31,13,0,109,31,13,0,110,31,13,0,111,31,13,0,0,0,7,0,1,0,7,0,2,0,7,0,3,0,7,0,4,0,7,0,5,0,7,0,6,0,7,0,7,0,7,0,8,0,7,0,9,0,7,0,10,0,7,0,11,0,7,0,12,0,7,0,13,0,7,0,14,0,7,0,15,0,7,0,16,0,7,0,1,0,1,0,1,0,2,0,17,0,7,0,18,0,7,0,19,0,7,0,20,0,7,0,21,0,7,0,22,0,7,0,23,0,7,0,24,0,7,0,25,0,7,0,26,0,7,0,27,0,7,0,28,0,7,0,29,0,7,0,30,0,7,0,31,0,7,0,0,0,5,0,1,0,4,0,1,0,5,0,8,0,6,0,9,0,6,0,10,0,6,0,22,0,7,0,12,0,6,0,23,0,7,0,13,0,6,0,56,0,8,0,29,0,7,0,57,0,8,0,128,7,13,0,129,7,13,0,130,7,13,0,131,7,13,0,2,0,3,0,1,0,1,0,3,0,3,0,31,0,7,0,61,0,8,0,121,0,9,0,132,7,13,0,133,7,13,0,134,7,13,0,135,7,13,0,136,7,13,0,137,7,13,0,138,7,13,0,139,7,13,0,140,7,13,0,141,7,13,0,199,3,12,0,0,0,4,0,1,0,2,0,1,0,3,0,4,0,3,0,1,0,4,0,10,0,4,0,22,0,5,0,46,0,6,0,94,0,7,0,95,0,7,0,192,0,8,0,64,48,14,0,65,48,14,0,5,3,10,0,131,1,9,0,66,48,14,0,67,48,14,0,13,0,4,0,7,0,3,0,25,0,5,0,49,0,6,0,194,0,8,0,195,0,8,0,68,48,14,0,69,48,14,0,70,48,14,0,71,48,14,0,72,48,14,0,73,48,14,0,74,48,14,0,75,48,14,0,76,48,14,0,77,48,14,0,39,24,13,0,0,0,6,0,1,0,6,0,2,0,6,0,6,0,7,0,7,0,7,0,4,0,6,0,5,0,6,0,6,0,6,0,14,0,7,0,30,0,8,0,31,0,8,0,64,0,9,0,130,0,10,0,48,8,14,0,49,8,14,0,50,8,14,0,51,8,14,0,1,0,1,0,1,0,2,0,3,0,4,0,5,0,5,0,9,0,6,0,17,0,7,0,33,0,8,0,52,8,14,0,53,8,14,0,54,8,14,0,55,8,14,0,56,8,14,0,57,8,14,0,58,8,14,0,59,8,14,0,30,4,13,0,31,4,13,0,0,0,5,0,1,0,4,0,2,0,4,0,1,0,5,0,6,0,5,0,4,0,4,0,7,0,5,0,10,0,5,0,44,0,7,0,45,0,7,0,192,5,12,0,193,5,12,0,194,5,12,0,195,5,12,0,196,5,12,0,197,5,12,0,198,5,12,0,3,0,3,0,2,0,2,0,6,0,3,0,14,0,4,0,30,0,5,0,31,0,5,0,47,0,7,0,93,0,8,0,199,5,12,0,200,5,12,0,201,5,12,0,202,5,12,0,203,5,12,0,204,5,12,0,205,5,12,0,206,5,12,0,207,5,12,0,0,0,3,0,1,0,3,0,2,0,3,0,6,0,4,0,7,0,4,0,4,0,3,0,10,0,4,0,11,0,4,0,48,0,6,0,98,0,7,0,99,0,7,0,64,6,11,0,65,6,11,0,66,6,11,0,67,6,11,0,68,6,11,0,69,6,11,0,51,0,6,0,13,0,4,0,28,0,5,0,29,0,5,0,60,0,6,0,31,0,5,0,101,0,7,0,122,0,7,0,70,6,11,0,123,0,7,0,71,6,11,0,72,6,11,0,73,6,11,0,74,6,11,0,75,6,11,0,38,3,10,0,39,3,10,0,0,0,7,0,1,0,7,0,1,0,6,0,4,0,7,0,3,0,6,0,5,0,7,0,16,0,8,0,17,0,8,0,64,2,13,0,65,2,13,0,66,2,13,0,67,2,13,0,68,2,13,0,69,2,13,0,70,2,13,0,71,2,13,0,36,1,12,0,1,0,1,0,1,0,2,0,1,0,3,0,3,0,5,0,5,0,6,0,19,0,8,0,37,1,12,0,38,1,12,0,39,1,12,0,40,1,12,0,41,1,12,0,42,1,12,0,43,1,12,0,44,1,12,0,45,1,12,0,46,1,12,0,47,1,12,0,0,0,4,0,1,0,3,0,2,0,3,0,1,0,4,0,6,0,4,0,4,0,3,0,5,0,3,0,6,0,3,0,14,0,5,0,15,0,5,0,112,0,7,0,16,7,11,0,17,7,11,0,18,7,11,0,19,7,11,0,20,7,11,0,21,7,11,0,29,0,5,0,114,0,7,0,60,0,6,0,61,0,6,0,115,0,7,0,124,0,7,0,125,0,7,0,126,0,7,0,22,7,11,0,23,7,11,0,24,7,11,0,127,0,7,0,25,7,11,0,26,7,11,0,27,7,11,0,142,3,10,0,143,3,10,0,0,0,8,0,1,0,7,0,2,0,7,0,3,0,7,0,2,0,9,0,8,0,8,0,3,0,9,0,64,2,14,0,65,2,14,0,66,2,14,0,67,2,14,0,68,2,14,0,69,2,14,0,70,2,14,0,71,2,14,0,36,1,13,0,37,1,13,0,1,0,2,0,1,0,1,0,1,0,3,0,1,0,4,0,3,0,6,0,5,0,7,0,19,0,9,0,38,1,13,0,39,1,13,0,40,1,13,0,41,1,13,0,42,1,13,0,43,1,13,0,44,1,13,0,45,1,13,0,46,1,13,0,47,1,13,0,0,0,7,0,1,0,7,0,1,0,6,0,2,0,6,0,3,0,6,0,4,0,6,0,5,0,6,0,6,0,6,0,7,0,6,0,8,0,6,0,9,0,6,0,10,0,6,0,11,0,6,0,12,0,6,0,13,0,6,0,14,0,6,0,15,0,6,0,16,0,6,0,17,0,6,0,18,0,6,0,19,0,6,0,20,0,6,0,21,0,6,0,22,0,6,0,23,0,6,0,24,0,6,0,25,0,6,0,1,0,1,0,26,0,6,0,27,0,6,0,28,0,6,0,29,0,6,0,30,0,6,0,31,0,6,0,0,0,5,0,1,0,4,0,1,0,5,0,4,0,5,0,10,0,6,0,6,0,5,0,11,0,6,0,14,0,6,0,60,0,8,0,61,0,8,0,192,7,13,0,193,7,13,0,194,7,13,0,195,7,13,0,196,7,13,0,197,7,13,0,198,7,13,0,1,0,2,0,2,0,2,0,6,0,3,0,14,0,4,0,30,0,5,0,31,0,5,0,63,0,8,0,125,0,9,0,199,7,13,0,200,7,13,0,201,7,13,0,202,7,13,0,203,7,13,0,204,7,13,0,205,7,13,0,206,7,13,0,207,7,13,0,0,0,7,0,1,0,7,0,2,0,7,0,3,0,7,0,4,0,7,0,5,0,7,0,6,0,7,0,7,0,7,0,8,0,7,0,9,0,7,0,10,0,7,0,11,0,7,0,12,0,7,0,13,0,7,0,14,0,7,0,15,0,7,0,16,0,7,0,1,0,1,0,1,0,2,0,17,0,7,0,18,0,7,0,19,0,7,0,20,0,7,0,21,0,7,0,22,0,7,0,23,0,7,0,24,0,7,0,25,0,7,0,26,0,7,0,27,0,7,0,28,0,7,0,29,0,7,0,30,0,7,0,31,0,7,0,0,0,3,0,2,0,4,0,3,0,4,0,8,0,5,0,18,0,6,0,38,0,7,0,20,0,6,0,78,0,8,0,79,0,8,0,168,0,9,0,82,1,10,0,170,0,9,0,171,0,9,0,172,0,9,0,96,42,15,0,167,2,11,0,6,0,4,0,11,0,5,0,28,0,6,0,58,0,7,0,15,0,5,0,59,0,7,0,16,0,5,0,5,0,3,0,9,0,4,0,17,0,5,0,24,0,5,0,25,0,5,0,26,0,5,0,54,0,6,0,55,0,6,0,112,0,7,0,87,0,8,0,226,0,8,0,227,0,8,0,228,0,8,0,229,0,8,0,173,0,9,0,152,3,10,0,58,0,6,0,118,0,7,0,231,0,8,0,238,0,8,0,239,0,8,0,50,7,11,0,154,3,10,0,51,7,11,0,97,42,15,0,120,0,7,0,49,21,14,0,50,21,14,0,51,21,14,0,61,0,6,0,155,3,10,0,52,21,14,0,53,21,14,0,54,21,14,0,121,0,7,0,55,21,14,0,248,0,8,0,242,1,9,0,204,7,11,0,231,3,10,0,205,7,11,0,128,62,14,0,251,0,8,0,233,3,10,0,129,62,14,0,130,62,14,0,131,62,14,0,132,62,14,0,133,62,14,0,134,62,14,0,63,0,6,0,245,1,9,0,209,7,11,0,135,62,14,0,0,0,2,0,2,0,3,0,6,0,4,0,14,0,5,0,30,0,6,0,31,0,6,0,64,0,7,0,130,0,8,0,131,0,8,0,132,0,8,0,10,1,9,0,11,1,9,0,48,4,11,0,49,4,11,0,50,4,11,0,51,4,11,0,5,0,3,0,17,0,5,0,36,0,6,0,74,0,7,0,12,0,4,0,38,0,6,0,13,0,4,0,135,0,8,0,13,1,9,0,88,2,10,0,45,1,9,0,89,2,10,0,92,2,10,0,116,9,12,0,94,2,10,0,95,2,10,0,112,2,10,0,113,2,10,0,187,4,11,0,117,9,12,0,114,2,10,0,204,9,12,0,205,9,12,0,112,78,15,0,113,78,15,0,114,78,15,0,115,78,15,0,58,39,14,0,59,39,14,0,60,39,14,0,232,4,11,0,233,4,11,0,158,0,8,0,117,2,10,0,216,9,12,0,61,39,14,0,14,0,4,0,60,0,6,0,122,0,7,0,159,0,8,0,119,2,10,0,62,0,6,0,246,0,8,0,237,4,11,0,220,3,10,0,62,39,14,0,186,7,11,0,217,9,12,0,63,39,14,0,216,61,14,0,217,61,14,0,218,61,14,0,219,61,14,0,220,61,14,0,221,61,14,0,222,61,14,0,223,61,14,0,63,0,6,0,188,7,11,0,189,7,11,0,223,3,10,0,0,0,3,0,2,0,4,0,6,0,5,0,14,0,6,0,30,0,7,0,62,0,8,0,63,0,8,0,64,0,8,0,4,1,10,0,131,0,9,0,5,1,10,0,8,1,10,0,64,66,16,0,10,1,10,0,11,1,10,0,65,66,16,0,3,0,3,0,9,0,5,0,17,0,6,0,67,0,8,0,4,0,3,0,10,0,5,0,10,0,4,0,44,0,7,0,180,0,9,0,181,0,9,0,182,0,9,0,183,0,9,0,184,0,9,0,114,1,10,0,115,1,10,0,116,1,10,0,117,1,10,0,118,1,10,0,119,1,10,0,188,0,9,0,122,1,10,0,19,2,11,0,66,66,16,0,123,1,10,0,248,2,11,0,125,1,10,0,249,2,11,0,126,1,10,0,67,66,16,0,254,2,11,0,34,33,15,0,35,33,15,0,88,0,7,0,100,1,9,0,36,33,15,0,37,33,15,0,6,0,3,0,14,0,4,0,45,0,6,0,46,0,6,0,179,0,8,0,30,0,5,0,94,0,7,0,38,33,15,0,39,33,15,0,40,33,15,0,41,33,15,0,255,2,11,0,42,33,15,0,148,5,11,0,149,5,11,0,150,5,11,0,43,33,15,0,44,33,15,0,45,33,15,0,46,33,15,0,47,33,15,0,31,0,5,0,151,5,11,0,190,0,8,0,191,0,8,0,0,0,2,0,2,0,3,0,6,0,4,0,7,0,4,0,16,0,5,0,17,0,5,0,36,0,6,0,37,0,6,0,38,0,6,0,39,0,6,0,80,0,7,0,81,0,7,0,164,0,8,0,165,0,8,0,166,0,8,0,78,1,9,0,11,0,4,0,42,0,6,0,86,0,7,0,79,1,9,0,48,0,6,0,174,0,8,0,98,0,7,0,50,0,6,0,51,0,6,0,52,0,6,0,53,0,6,0,54,0,6,0,99,0,7,0,110,0,7,0,111,0,7,0,112,0,7,0,113,0,7,0,114,0,7,0,115,0,7,0,116,0,7,0,175,0,8,0,234,0,8,0,214,1,9,0,92,7,11,0,175,3,10,0,208,117,15,0,209,117,15,0,210,117,15,0,211,117,15,0,212,117,15,0,118,0,7,0,238,0,8,0,239,0,8,0,187,14,12,0,224,1,9,0,213,117,15,0,121,0,7,0,225,1,9,0,214,117,15,0,215,117,15,0,128,120,15,0,244,0,8,0,137,7,11,0,62,0,6,0,123,0,7,0,245,0,8,0,252,0,8,0,127,0,7,0,227,1,9,0,138,7,11,0,139,7,11,0,129,120,15,0,130,120,15,0,131,120,15,0,66,60,14,0,67,60,14,0,68,60,14,0,253,0,8,0,69,60,14,0,70,60,14,0,71,60,14,0,0,0,2,0,4,0,4,0,10,0,5,0,22,0,6,0,23,0,6,0,48,0,7,0,49,0,7,0,100,0,8,0,101,0,8,0,102,0,8,0,206,0,9,0,207,0,9,0,160,1,10,0,161,1,10,0,32,26,14,0,137,6,12,0,4,0,3,0,14,0,5,0,27,0,6,0,53,0,7,0,10,0,4,0,30,0,6,0,22,0,5,0,23,0,5,0,31,0,6,0,48,0,6,0,49,0,6,0,100,0,7,0,101,0,7,0,105,0,8,0,102,0,7,0,206,0,8,0,207,0,8,0,208,0,8,0,209,0,8,0,210,0,8,0,166,1,9,0,163,1,10,0,78,3,10,0,106,0,7,0,214,0,8,0,174,1,9,0,175,1,9,0,79,3,10,0,69,3,11,0,176,1,9,0,177,1,9,0,100,3,10,0,109,0,7,0,220,0,8,0,148,13,12,0,149,13,12,0,14,0,4,0,60,0,6,0,221,0,8,0,222,0,8,0,179,1,9,0,61,0,6,0,223,0,8,0,240,1,9,0,226,3,10,0,227,3,10,0,203,6,11,0,228,3,10,0,202,7,11,0,243,1,9,0,244,1,9,0,203,7,11,0,212,7,11,0,33,26,14,0,34,26,14,0,213,7,11,0,35,26,14,0,63,0,6,0,246,1,9,0,247,1,9,0,235,3,10,0,0,0,2,0,2,0,3,0,6,0,4,0,14,0,5,0,15,0,5,0,32,0,6,0,33,0,6,0,68,0,7,0,69,0,7,0,70,0,7,0,142,0,8,0,143,0,8,0,144,0,8,0,34,1,9,0,70,2,10,0,36,1,9,0,5,0,3,0,19,0,5,0,74,0,7,0,147,0,8,0,24,0,5,0,75,0,7,0,50,0,6,0,26,0,5,0,51,0,6,0,108,0,7,0,109,0,7,0,110,0,7,0,222,0,8,0,223,0,8,0,112,0,7,0,226,0,8,0,227,0,8,0,228,0,8,0,229,0,8,0,230,0,8,0,231,0,8,0,37,1,9,0,208,1,9,0,142,4,11,0,30,9,12,0,31,9,12,0,64,116,15,0,17,29,13,0,65,116,15,0,66,116,15,0,233,0,8,0,212,1,9,0,235,0,8,0,163,3,10,0,213,1,9,0,18,29,13,0,30,0,5,0,118,0,7,0,220,1,9,0,221,1,9,0,67,116,15,0,124,0,7,0,69,7,11,0,239,0,8,0,250,0,8,0,251,0,8,0,248,1,9,0,253,0,8,0,228,7,11,0,202,15,12,0,19,29,13,0,88,126,15,0,89,126,15,0,90,126,15,0,91,126,15,0,92,126,15,0,93,126,15,0,127,0,7,0,47,63,14,0,230,7,11,0,231,7,11,0,0,0,3,0,2,0,4,0,3,0,4,0,8,0,5,0,9,0,5,0,20,0,6,0,21,0,6,0,44,0,7,0,90,0,8,0,91,0,8,0,92,0,8,0,186,0,9,0,187,0,9,0,188,0,9,0,244,2,11,0,234,5,12,0,3,0,3,0,16,0,5,0,34,0,6,0,70,0,7,0,9,0,4,0,40,0,6,0,21,0,5,0,11,0,4,0,24,0,5,0,41,0,6,0,50,0,6,0,71,0,7,0,102,0,7,0,103,0,7,0,104,0,7,0,105,0,7,0,106,0,7,0,95,0,8,0,214,0,8,0,215,0,8,0,176,1,9,0,217,0,8,0,123,1,10,0,109,0,7,0,220,0,8,0,177,1,9,0,232,6,11,0,187,1,9,0,117,3,10,0,235,5,12,0,188,1,9,0,144,110,15,0,56,0,6,0,114,0,7,0,145,110,15,0,146,110,15,0,29,0,5,0,115,0,7,0,189,1,9,0,248,6,11,0,147,110,15,0,60,0,6,0,191,1,9,0,244,0,8,0,234,1,9,0,125,3,10,0,214,3,10,0,249,6,11,0,148,110,15,0,246,0,8,0,238,1,9,0,149,110,15,0,150,110,15,0,151,110,15,0,76,55,14,0,77,55,14,0,78,55,14,0,31,0,5,0,215,3,10,0,239,1,9,0,79,55,14,0,0,0,2,0,4,0,4,0,10,0,5,0,22,0,6,0,46,0,7,0,47,0,7,0,96,0,8,0,97,0,8,0,196,0,9,0,197,0,9,0,198,0,9,0,142,1,10,0,224,49,15,0,225,49,15,0,226,49,15,0,227,49,15,0,4,0,3,0,13,0,5,0,25,0,6,0,56,0,7,0,10,0,4,0,29,0,6,0,11,0,4,0,114,0,8,0,115,0,8,0,240,0,9,0,226,1,10,0,242,0,9,0,227,1,10,0,243,0,9,0,232,1,10,0,233,1,10,0,228,49,15,0,234,1,10,0,31,3,11,0,214,3,11,0,229,49,15,0,236,1,10,0,230,49,15,0,247,0,9,0,215,3,11,0,231,49,15,0,232,49,15,0,218,3,11,0,219,3,11,0,233,49,15,0,224,3,11,0,234,49,15,0,63,0,7,0,241,1,10,0,235,49,15,0,236,49,15,0,6,0,3,0,28,0,5,0,116,0,7,0,117,0,7,0,249,0,9,0,30,0,5,0,118,0,7,0,250,0,9,0,225,3,11,0,237,49,15,0,247,24,14,0,96,31,14,0,97,31,14,0,220,1,9,0,221,1,9,0,98,31,14,0,99,31,14,0,100,31,14,0,101,31,14,0,102,31,14,0,103,31,14,0,31,0,5,0,237,3,11,0,239,0,8,0,247,1,10,0,0,0,3,0,2,0,4,0,6,0,5,0,7,0,5,0,8,0,5,0,9,0,5,0,20,0,6,0,42,0,7,0,22,0,6,0,43,0,7,0,92,0,8,0,47,0,7,0,48,0,7,0,93,0,8,0,98,0,8,0,198,0,9,0,7,0,4,0,25,0,6,0,26,0,6,0,54,0,7,0,16,0,5,0,110,0,8,0,34,0,6,0,9,0,4,0,10,0,4,0,22,0,5,0,35,0,6,0,46,0,6,0,47,0,6,0,48,0,6,0,98,0,7,0,99,0,7,0,100,0,7,0,101,0,7,0,102,0,7,0,103,0,7,0,104,0,7,0,105,0,7,0,106,0,7,0,107,0,7,0,108,0,7,0,199,0,9,0,222,0,9,0,223,0,9,0,208,6,11,0,181,1,9,0,55,0,6,0,219,0,8,0,28,0,5,0,116,0,7,0,212,1,9,0,213,1,9,0,118,0,7,0,105,3,10,0,136,54,14,0,137,54,14,0,138,54,14,0,119,0,7,0,172,3,10,0,120,0,7,0,242,0,8,0,215,1,9,0,243,0,8,0,122,0,7,0,139,54,14,0,123,0,7,0,124,0,7,0,173,3,10,0,232,3,10,0,140,54,14,0,141,54,14,0,233,3,10,0,142,54,14,0,63,0,6,0,245,1,9,0,251,0,8,0,143,54,14,0,0,0,2,0,4,0,4,0,10,0,5,0,11,0,5,0,24,0,6,0,50,0,7,0,51,0,7,0,52,0,7,0,106,0,8,0,214,0,9,0,215,0,9,0,216,0,9,0,217,0,9,0,128,54,15,0,181,1,10,0,105,3,11,0,4,0,3,0,14,0,5,0,30,0,6,0,55,0,7,0,10,0,4,0,22,0,5,0,12,0,4,0,31,0,6,0,92,0,7,0,93,0,7,0,188,0,8,0,189,0,8,0,95,0,7,0,208,0,8,0,219,0,9,0,209,0,8,0,164,1,9,0,165,1,9,0,166,1,9,0,167,1,9,0,80,3,10,0,162,6,11,0,163,6,11,0,169,1,9,0,170,1,9,0,172,6,11,0,129,54,15,0,87,3,10,0,130,54,15,0,131,54,15,0,132,54,15,0,133,54,15,0,54,0,6,0,214,0,8,0,134,54,15,0,135,54,15,0,14,0,4,0,110,0,7,0,215,0,8,0,173,6,11,0,136,54,15,0,30,0,5,0,222,0,8,0,248,6,11,0,125,3,10,0,137,54,15,0,138,54,15,0,139,54,15,0,140,54,15,0,191,1,9,0,141,54,15,0,71,27,14,0,200,55,14,0,201,55,14,0,202,55,14,0,203,55,14,0,204,55,14,0,31,0,5,0,205,55,14,0,206,55,14,0,207,55,14,0,0,0,3,0,2,0,4,0,3,0,4,0,8,0,5,0,18,0,6,0,38,0,7,0,20,0,6,0,39,0,7,0,168,0,9,0,169,0,9,0,85,0,8,0,0,43,15,0,173,0,9,0,1,43,15,0,2,43,15,0,3,43,15,0,3,0,3,0,11,0,5,0,64,0,7,0,65,0,7,0,9,0,4,0,33,0,6,0,17,0,5,0,10,0,4,0,11,0,4,0,24,0,5,0,50,0,6,0,51,0,6,0,52,0,6,0,53,0,6,0,108,0,7,0,87,0,8,0,109,0,7,0,220,0,8,0,89,1,10,0,221,0,8,0,188,1,9,0,122,3,10,0,123,3,10,0,56,0,6,0,114,0,7,0,190,1,9,0,191,1,9,0,230,0,8,0,156,3,10,0,207,1,9,0,4,43,15,0,5,43,15,0,116,0,7,0,212,1,9,0,6,43,15,0,7,43,15,0,30,0,5,0,235,0,8,0,132,21,14,0,133,21,14,0,134,21,14,0,59,0,6,0,213,1,9,0,240,1,9,0,157,3,10,0,226,3,10,0,135,21,14,0,136,21,14,0,137,21,14,0,249,0,8,0,138,21,14,0,139,21,14,0,227,3,10,0,140,21,14,0,141,21,14,0,244,1,9,0,142,21,14,0,63,0,6,0,251,0,8,0,245,1,9,0,143,21,14,0,0,0,3,0,2,0,4,0,6,0,5,0,7,0,5,0,16,0,6,0,17,0,6,0,36,0,7,0,37,0,7,0,19,0,6,0,20,0,6,0,42,0,7,0,43,0,7,0,176,0,9,0,177,0,9,0,45,0,7,0,89,0,8,0,12,0,5,0,23,0,6,0,208,0,9,0,53,0,7,0,27,0,6,0,56,0,7,0,57,0,7,0,4,0,3,0,5,0,3,0,15,0,5,0,24,0,5,0,29,0,6,0,50,0,6,0,51,0,6,0,104,0,7,0,105,0,7,0,105,0,8,0,212,0,8,0,213,0,8,0,214,0,8,0,108,0,7,0,55,0,6,0,109,0,7,0,112,0,7,0,57,0,6,0,215,0,8,0,209,0,9,0,128,56,14,0,129,56,14,0,130,56,14,0,116,0,7,0,197,1,9,0,117,0,7,0,227,0,8,0,131,56,14,0,132,56,14,0,236,0,8,0,133,56,14,0,67,28,13,0,68,28,13,0,69,28,13,0,237,0,8,0,70,28,13,0,60,0,6,0,119,0,7,0,232,1,9,0,62,0,6,0,123,0,7,0,71,28,13,0,126,0,7,0,127,0,7,0,72,28,13,0,73,28,13,0,74,28,13,0,75,28,13,0,76,28,13,0,77,28,13,0,245,0,8,0,78,28,13,0,233,1,9,0,79,28,13,0,0,0,2,0,4,0,4,0,10,0,5,0,11,0,5,0,24,0,6,0,25,0,6,0,52,0,7,0,53,0,7,0,54,0,7,0,110,0,8,0,222,0,9,0,223,0,9,0,192,1,10,0,193,1,10,0,194,1,10,0,96,56,15,0,4,0,3,0,15,0,5,0,29,0,6,0,57,0,7,0,10,0,4,0,44,0,6,0,45,0,6,0,12,0,4,0,23,0,5,0,52,0,6,0,53,0,6,0,54,0,6,0,110,0,7,0,111,0,7,0,112,0,7,0,113,0,7,0,113,0,8,0,228,0,8,0,229,0,8,0,230,0,8,0,231,0,8,0,232,0,8,0,164,3,10,0,117,0,7,0,236,0,8,0,211,1,9,0,218,1,9,0,165,3,10,0,182,3,10,0,13,7,12,0,183,3,10,0,14,7,12,0,60,0,6,0,238,0,8,0,97,56,15,0,98,56,15,0,61,0,6,0,222,1,9,0,99,56,15,0,100,56,15,0,101,56,15,0,124,0,7,0,15,7,12,0,190,3,10,0,191,3,10,0,102,56,15,0,160,15,12,0,209,7,11,0,103,56,15,0,251,0,8,0,245,1,9,0,8,125,15,0,164,15,12,0,9,125,15,0,10,125,15,0,11,125,15,0,134,62,14,0,63,0,6,0,165,15,12,0,211,7,11,0,135,62,14,0,0,0,3,0,2,0,4,0,3,0,4,0,8,0,5,0,9,0,5,0,20,0,6,0,42,0,7,0,86,0,8,0,184,2,11,0,175,0,9,0,185,2,11,0,93,1,10,0,192,2,11,0,16,44,15,0,17,44,15,0,18,44,15,0,6,0,4,0,14,0,5,0,23,0,6,0,45,0,7,0,15,0,5,0,64,0,7,0,33,0,6,0,5,0,3,0,9,0,4,0,17,0,5,0,24,0,5,0,25,0,5,0,26,0,5,0,54,0,6,0,55,0,6,0,65,0,7,0,89,0,8,0,224,0,8,0,225,0,8,0,113,0,7,0,228,0,8,0,177,0,9,0,194,2,11,0,29,0,5,0,115,0,7,0,229,0,8,0,240,0,8,0,121,0,7,0,196,3,10,0,227,1,9,0,232,1,9,0,19,44,15,0,123,0,7,0,20,44,15,0,21,44,15,0,22,44,15,0,124,0,7,0,195,2,11,0,23,44,15,0,12,22,14,0,13,22,14,0,125,0,7,0,14,22,14,0,233,1,9,0,197,3,10,0,212,3,10,0,235,1,9,0,15,22,14,0,80,61,14,0,252,0,8,0,171,7,11,0,81,61,14,0,82,61,14,0,83,61,14,0,84,61,14,0,250,1,9,0,85,61,14,0,127,0,7,0,251,1,9,0,86,61,14,0,87,61,14,0,0,0,3,0,2,0,4,0,3,0,4,0,8,0,5,0,9,0,5,0,10,0,5,0,11,0,5,0,24,0,6,0,50,0,7,0,13,0,5,0,51,0,7,0,0,14,13,0,57,0,7,0,1,14,13,0,58,0,7,0,2,14,13,0,8,0,4,0,30,0,6,0,59,0,7,0,62,0,7,0,18,0,5,0,63,0,7,0,19,0,5,0,40,0,6,0,41,0,6,0,84,0,7,0,43,0,6,0,85,0,7,0,88,0,7,0,3,14,13,0,89,0,7,0,90,0,7,0,4,14,13,0,5,14,13,0,3,7,12,0,91,0,7,0,92,0,7,0,4,7,12,0,5,7,12,0,93,0,7,0,6,7,12,0,7,7,12,0,8,7,12,0,9,7,12,0,10,7,12,0,11,7,12,0,24,0,5,0,47,0,6,0,13,0,4,0,25,0,5,0,12,7,12,0,112,0,7,0,29,0,5,0,13,7,12,0,14,7,12,0,15,7,12,0,16,7,12,0,57,0,6,0,17,7,12,0,60,0,6,0,18,7,12,0,19,7,12,0,20,7,12,0,21,7,12,0,22,7,12,0,61,0,6,0,23,7,12,0,24,7,12,0,25,7,12,0,26,7,12,0,27,7,12,0,28,7,12,0,29,7,12,0,31,0,5,0,30,7,12,0,113,0,7,0,31,7,12,0,0,0,3,0,2,0,4,0,6,0,5,0,14,0,6,0,15,0,6,0,64,0,8,0,65,0,8,0,66,0,8,0,24,2,11], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([209,117,105,63,10,242,243,61,120,95,61,63,100,31,36,189,212,11,34,63,134,57,185,190,11,211,215,62,218,29,98,191,40,241,249,190,97,55,172,62,71,199,237,62,26,22,59,191,11,184,23,191,238,237,106,63,7,180,132,190,159,88,3,63,188,2,65,190,200,234,118,63,7,180,124,191,247,175,172,187,103,158,244,62,78,39,41,63,242,35,254,60,211,77,34,61,46,89,101,63,177,50,106,62,214,55,144,61,2,183,114,191,108,238,40,61,237,156,98,63,198,195,39,63,129,180,63,189,45,151,141,59,124,70,202,62,194,194,105,63,251,177,185,190,133,121,119,191,176,88,171,62,94,219,123,190,17,228,232,190,17,112,168,190,52,19,72,191,138,32,62,190,103,127,160,61,70,37,93,191,218,29,14,63,199,46,209,190,95,96,86,189,162,8,5,63,246,150,202,190,171,64,113,63,143,25,40,187,45,36,60,191,201,200,217,188,77,131,118,191,255,202,86,191,154,65,76,191,243,29,220,61,2,130,73,191,51,53,121,62,71,170,239,187,196,65,94,63,235,173,77,191,218,59,127,63,37,202,134,62,41,235,99,191,71,58,187,190,27,215,151,62,94,130,227,62,10,216,198,62,133,121,87,63,217,118,98,191,209,88,27,63,59,29,176,190,145,100,70,62,139,51,62,63,195,240,73,191,176,1,73,63,245,100,158,190,223,23,59,63,186,73,28,191,159,227,187,190,117,32,139,190,207,219,176,190,234,63,27,63,30,78,112,190,155,227,60,190,80,254,78,63,55,112,95,63,236,162,232,60,216,186,84,61,119,188,9,190,159,200,211,189,201,118,126,62,16,205,12,190,18,20,87,191,52,101,183,62,15,95,254,62,247,174,233,62,31,49,74,190,154,35,235,189,1,162,152,62,131,24,168,189,162,11,2,191,99,66,116,63,253,105,99,191,23,216,67,191,96,174,85,191,196,151,101,63,139,84,152,189,127,105,101,63,7,178,54,191,159,3,15,63,119,77,192,190,235,254,113,189,36,14,41,62,122,139,199,62,59,167,65,63,227,196,215,188,232,107,134,62,181,78,92,190,122,114,121,191,42,57,95,191,63,115,46,63,5,136,9,193,102,148,185,63,200,195,97,186,39,7,206,63,194,244,136,148,16,147,221,63,9,31,89,223,17,172,229,63,35,236,118,30,94,181,234,63,52,149,153,96,165,27,240,63,115,135,245,208,195,131,242,63,52,207,26,143,156,68,245,63,27,177,129,58,6,232,247,63,148,120,131,99,171,143,250,63,136,50,67,7,190,137,253,63,226,26,175,98,112,108,0,64,254,160,248,241,19,39,2,64,141,110,168,11,189,245,3,64,211,145,165,212,250,188,5,64,122,36,89,156,245,84,7,64,67,182,116,16,41,130,183,63,130,138,43,41,30,176,207,63,212,50,67,123,93,156,222,63,97,71,83,165,124,28,228,63,232,51,133,174,130,40,233,63,38,250,33,219,158,197,237,63,233,8,131,99,52,129,241,63,98,54,249,20,157,8,244,63,238,227,75,93,119,24,247,63,242,72,255,52,117,123,250,63,188,214,116,49,204,68,254,63,175,142,205,89,25,198,0,64,166,189,28,209,152,98,2,64,176,140,43,124,102,220,3,64,12,99,14,103,94,118,5,64,176,170,127,140,144,12,7,64,110,108,91,116,240,156,204,63,252,13,0,188,81,57,218,63,131,13,156,171,30,123,230,63,66,116,29,110,52,185,241,63,71,79,75,220,124,77,246,63,61,211,148,171,59,201,250,63,47,161,41,84,227,72,255,63,138,153,44,142,132,194,1,64,33,105,159,38,45,21,4,64,190,192,211,60,108,67,6,64,111,248,44,114,128,30,195,63,182,57,17,102,154,197,215,63,2,254,38,157,19,166,232,63,125,67,139,106,157,249,240,63,3,24,221,93,138,59,245,63,228,244,200,178,38,74,249,63,143,67,177,87,7,112,253,63,42,161,226,89,181,228,0,64,131,2,194,209,13,15,3,64,228,154,45,98,25,126,5,64,176,13,11,63,136,62,248,189,216,24,125,190,0,4,140,61,172,65,17,62,170,248,128,62,154,218,189,62,68,11,212,62,142,60,18,63,253,211,21,63,30,43,17,63,177,223,35,63,228,15,37,63,22,49,44,63,220,186,255,62,54,182,14,63,56,248,80,62,48,40,2,190,32,14,104,190,224,112,38,189,192,169,109,188,0,240,231,60,88,77,174,61,64,3,187,61,144,225,5,62,20,70,69,62,148,148,108,62,96,206,144,62,66,103,162,62,46,139,226,62,180,150,151,62,158,194,179,62,30,177,78,63,32,26,37,61,87,13,10,63,66,95,49,63,69,98,38,63,108,153,59,63,40,140,70,63,132,208,70,63,59,204,97,63,40,163,87,63,88,208,99,63,103,78,89,63,81,141,93,63,194,62,44,63,178,238,29,63,233,243,44,63,170,19,187,62,56,67,173,189,224,197,183,188,16,134,229,61,16,4,209,61,60,94,50,62,28,26,90,62,20,51,93,62,126,80,185,62,82,80,214,62,127,167,11,63,90,81,9,63,153,252,10,63,66,126,179,62,54,194,168,62,0,101,185,62,64,200,60,62,192,87,147,60,174,228,159,62,144,83,184,62,36,154,124,62,52,123,94,62,60,75,74,62,136,42,241,61,64,30,245,61,80,251,173,61,232,40,197,61,188,252,34,62,208,144,107,62,80,214,157,62,204,60,207,62,90,246,200,62,0,18,226,188,136,203,162,189,88,62,239,61,16,239,34,62,248,139,187,61,112,208,60,61,208,65,102,61,64,80,10,60,128,124,28,188,80,130,39,189,0,13,26,189,160,198,136,188,200,90,134,61,128,25,251,61,104,209,106,62,60,98,91,62,204,213,244,62,25,187,159,191,122,24,250,62,189,136,70,63,81,179,45,63,255,180,40,63,247,33,30,63,2,142,36,63,221,74,10,63,121,31,13,63,21,118,36,63,180,135,216,62,224,184,2,63,179,123,3,63,130,232,229,62,210,93,243,62,212,8,146,62,132,213,176,191,48,250,66,62,152,150,249,62,48,43,235,62,78,39,214,62,196,192,213,62,148,193,235,62,172,95,209,62,218,64,199,62,100,171,240,62,164,14,116,62,190,113,143,62,14,254,173,62,188,167,141,62,154,195,172,62,22,175,23,63,48,146,197,62,7,167,137,63,82,64,19,63,102,55,13,63,40,133,248,62,124,161,241,62,61,119,0,63,150,131,155,62,84,243,3,63,223,135,97,63,40,140,70,63,11,25,24,63,238,120,203,62,129,178,23,63,4,23,28,63,198,4,154,62,32,183,144,61,15,51,89,63,70,205,131,62,80,42,144,62,116,179,69,62,48,54,129,62,92,207,137,62,224,63,2,62,128,213,135,62,95,183,37,63,183,15,7,63,94,31,201,62,220,76,118,62,26,60,205,62,214,69,233,62,51,225,59,63,88,174,219,62,22,156,47,63,229,137,34,63,90,173,77,63,31,215,89,63,190,239,91,63,6,112,141,63,232,71,178,63,157,209,171,63,17,222,138,63,74,246,100,63,140,164,91,63,253,43,49,63,36,179,15,63,104,82,220,62,144,45,232,62,176,169,184,61,14,105,177,62,106,173,177,62,231,144,5,63,139,99,22,63,143,247,25,63,0,139,106,63,72,36,164,63,211,19,156,63,175,6,99,63,100,197,38,63,165,249,31,63,254,9,228,62,14,170,187,62,144,149,101,62,134,208,219,62,234,33,169,62,186,64,30,63,227,8,125,63,247,213,125,63,179,66,75,63,84,148,154,62,232,50,122,62,240,154,232,62,124,206,15,63,50,161,250,62,240,245,40,63,170,7,33,63,58,223,14,63,215,194,11,63,32,242,237,62,148,75,16,62,128,74,164,187,126,160,130,62,4,46,45,63,205,21,54,63,162,6,238,62,32,228,246,60,32,44,193,188,176,150,208,61,8,16,120,62,52,104,118,62,186,206,204,62,246,30,190,62,178,227,166,62,42,159,195,62,88,231,147,62,47,249,69,63,60,5,85,63,160,170,167,63,11,61,132,63,102,223,132,63,246,175,114,63,135,89,121,63,73,189,113,63,127,133,100,63,37,53,95,63,115,52,93,63,177,36,87,63,191,254,85,63,53,129,68,63,130,132,48,63,175,2,58,63,44,40,187,62,112,187,237,62,13,204,155,63,137,138,85,63,188,186,86,63,163,219,43,63,36,118,46,63,2,35,33,63,138,103,4,63,181,69,5,63,76,119,10,63,27,166,7,63,37,3,20,63,114,6,0,63,6,8,242,62,48,127,221,62,69,232,99,63,140,111,235,62,1,169,35,63,206,136,229,62,19,65,31,63,255,222,33,63,131,212,52,63,124,92,190,62,209,253,43,63,32,165,73,63,240,188,143,62,40,167,159,62,29,158,43,63,87,40,68,63,190,86,54,63,16,1,73,63,220,82,33,63,104,35,250,61,186,225,180,62,72,171,16,62,236,193,177,62,104,227,175,62,228,180,228,62,100,95,14,62,134,143,209,62,160,105,10,63,120,103,141,61,232,208,169,61,218,217,236,62,92,241,17,63,183,229,13,63,13,143,39,63,248,98,225,189,148,189,194,62,202,190,78,63,50,187,48,63,204,29,77,63,176,147,72,63,236,208,81,63,77,142,86,63,132,166,77,63,140,76,64,63,108,172,35,63,46,16,28,63,70,136,49,63,63,69,43,63,28,227,35,63,177,93,15,63,232,245,53,190,96,43,240,188,92,185,27,62,156,203,50,62,8,142,99,62,212,73,156,62,74,120,152,62,98,114,194,62,224,219,173,62,158,106,152,62,82,221,128,62,216,35,118,62,188,171,182,62,20,27,169,62,146,113,172,62,200,122,169,62,62,8,15,63,26,106,239,62,192,163,14,62,200,244,202,189,160,44,167,189,56,201,234,189,64,133,63,188,224,206,85,61,192,144,38,62,90,177,149,62,96,84,206,62,94,226,231,62,50,96,240,62,108,126,1,63,136,115,9,63,10,178,2,63,20,158,96,62,224,27,248,61,192,87,147,60,92,29,79,190,232,92,16,190,88,53,89,190,88,17,236,189,16,143,115,189,192,16,72,188,160,172,224,60,248,225,16,62,236,87,81,62,40,0,94,62,38,240,133,62,206,109,171,62,196,211,189,62,229,72,24,63,196,222,52,63,183,4,113,63,93,31,111,63,90,47,98,63,1,28,121,63,134,177,89,63,69,232,99,63,76,234,95,63,12,235,48,63,51,244,35,63,75,150,50,63,251,116,23,63,212,42,26,63,66,225,69,63,153,19,28,63,28,60,1,62,212,47,5,62,87,208,40,63,135,81,39,63,10,94,16,63,79,191,50,63,8,61,247,62,77,199,14,63,216,15,235,62,142,198,151,62,54,255,137,62,48,58,170,62,52,118,146,62,234,159,148,62,172,183,236,62,20,134,172,62,17,211,97,63,93,157,90,63,58,105,148,62,204,113,63,63,98,205,2,63,117,147,91,63,122,24,250,62,226,222,72,63,229,183,68,63,111,7,52,63,21,76,43,63,106,253,91,63,163,55,112,63,221,21,123,63,51,53,46,63,200,240,35,63,192,28,15,63,198,138,215,62,192,72,212,60,124,31,221,62,48,124,87,62,62,157,11,63,252,163,54,62,186,187,228,62,210,219,222,62,172,95,209,62,136,131,204,62,188,52,25,63,137,241,47,63,253,108,59,63,68,183,225,62,68,141,232,62,115,25,35,63,98,144,33,63,252,28,55,63,24,102,49,63,16,182,106,62,146,155,165,62,159,228,118,63,97,244,124,63,18,77,95,63,62,196,223,62,124,115,207,62,198,35,253,62,87,13,10,63,157,209,24,63,60,143,218,62,44,132,255,62,58,197,216,62,204,186,186,62,30,124,222,62,32,5,214,62,0,228,37,186,112,21,112,61,124,19,67,63,208,177,80,63,117,185,43,63,196,147,86,62,152,17,95,62,158,41,142,62,156,225,160,62,240,1,195,62,244,15,137,62,194,154,143,62,154,222,230,62,82,244,114,63,254,20,91,63,28,189,83,63,207,9,49,63,104,112,59,63,192,51,32,63,181,157,32,63,159,25,6,63,238,253,4,63,250,201,210,62,250,48,173,62,214,65,192,62,186,61,249,62,168,145,17,63,75,188,2,63,112,155,202,61,77,222,31,63,100,171,240,62,150,242,199,62,184,168,134,62,72,25,154,62,252,60,92,62,40,191,83,62,40,15,29,62,164,243,57,62,32,168,209,61,160,35,25,61,240,206,183,61,164,94,61,62,170,15,146,62,8,114,134,62,229,210,126,63,80,149,116,63,92,226,82,63,33,100,122,63,87,231,57,63,101,216,73,63,68,22,75,63,171,68,61,63,142,217,96,63,100,61,133,63,49,202,130,63,233,121,106,63,109,172,94,63,234,174,52,63,194,43,68,63,158,228,59,63,98,148,74,63,137,134,44,63,238,146,1,63,192,181,52,63,34,54,178,62,106,28,222,62,222,193,226,62,218,106,192,62,195,161,24,63,255,226,74,63,176,254,75,63,195,184,41,63,171,236,33,63,140,111,235,62,184,244,7,63,125,72,13,63,234,125,237,62,48,198,119,61,116,72,66,62,106,66,174,62,238,17,241,62,33,46,6,63,45,43,27,63,14,9,37,63,184,57,59,63,74,135,56,63,135,123,32,63,15,173,27,63,116,144,251,62,182,184,180,62,126,172,253,62,113,163,19,63,92,162,10,62,224,201,224,188,1,16,133,57,32,247,222,60,224,122,99,61,184,182,133,61,136,252,206,61,200,205,219,61,44,163,32,62,56,15,98,62,212,219,18,62,196,170,103,62,48,15,241,61,96,62,133,60,98,129,129,62,42,75,209,62,88,82,120,63,56,224,125,63,233,121,106,63,73,82,110,63,83,45,102,63,12,113,110,63,20,237,103,63,135,131,114,63,219,224,117,63,10,18,112,63,215,118,107,63,240,16,99,63,8,198,89,63,171,7,92,63,209,1,85,63,221,189,95,63,50,23,148,62,96,197,97,61,216,216,182,61,40,82,237,61,112,132,185,61,112,86,151,61,208,229,33,61,64,231,196,60,192,111,67,61,176,230,153,61,104,226,239,61,180,63,31,62,0,201,13,62,0,56,58,62,220,137,87,62,180,231,3,62,188,3,210,62,178,78,170,62,14,239,238,62,120,249,1,63,193,215,22,63,236,197,218,62,32,34,119,61,132,234,93,191,129,32,142,191,248,94,184,189,192,144,38,62,8,92,24,62,224,116,211,62,83,14,3,63,19,0,21,63,40,113,12,63,0,252,28,61,212,47,5,62,24,8,107,62,196,142,138,62,44,147,190,62,204,225,45,62,168,107,191,189,159,36,94,191,19,70,137,191,28,164,93,190,0,130,186,187,96,1,247,188,208,6,5,62,120,24,132,62,164,74,178,62,128,222,124,62,90,104,26,63,144,48,13,63,218,194,219,62,195,180,0,63,90,24,81,63,73,217,139,63,181,230,124,63,252,177,51,63,158,125,128,62,228,116,125,62,45,234,16,63,164,188,3,63,130,255,246,62,8,213,24,63,89,131,25,63,167,214,9,63,72,71,188,62,82,179,135,62,88,102,34,62,156,165,98,62,134,127,14,63,63,180,87,63,242,172,66,63,2,158,231,62,72,123,139,61,104,4,151,61,234,75,162,62,190,220,146,62,182,73,136,62,146,29,186,62,58,48,220,62,156,164,191,62,210,115,0,63,241,218,41,63,156,217,47,63,154,229,52,63,72,36,17,63,128,101,126,61,176,249,129,61,176,179,109,62,125,15,85,63,230,76,124,63,151,100,84,63,74,47,29,63,89,215,11,63,110,76,44,63,41,132,47,63,54,247,24,63,206,63,137,62,90,51,170,62,172,221,188,62,126,252,198,62,112,7,142,62,108,147,45,190,88,152,10,190,192,64,130,60,67,236,22,63,188,56,66,63,117,97,16,63,0,208,188,62,18,39,174,62,156,61,229,62,120,227,244,62,230,145,206,62,220,67,98,63,233,14,103,63,43,143,59,63,169,252,79,63,82,72,101,63,227,227,140,63,128,247,162,63,53,251,153,63,152,189,138,63,129,102,119,63,105,85,60,63,32,184,49,63,123,23,49,63,123,107,35,63,50,122,38,63,127,83,25,63,226,195,14,63,10,91,235,62,174,18,194,62,186,41,13,63,5,191,59,63,32,20,118,63,228,76,153,63,255,2,142,63,175,6,99,63,169,206,45,63,112,187,237,62,138,77,206,62,208,124,224,62,22,61,198,62,48,127,221,62,176,6,189,62,81,34,90,63,55,98,87,63,136,77,57,63,155,15,105,63,158,14,53,63,248,220,37,63,88,90,233,62,144,103,67,62,96,23,105,189,144,140,207,189,40,228,128,62,212,146,248,62,126,3,21,63,189,174,22,63,98,37,30,63,172,102,31,63,2,184,29,63,132,29,235,62,38,80,243,62,124,38,43,63,48,127,221,62,114,194,208,62,72,244,108,62,64,55,142,60,140,32,98,190,162,88,154,190,48,144,3,61,8,7,131,62,148,124,184,62,186,118,177,62,22,126,208,62,154,138,244,62,101,86,53,63,175,113,102,63,66,244,45,63,25,29,163,63,130,2,175,63,127,207,160,63,147,17,91,63,124,42,84,63,202,83,75,63,51,248,76,63,134,24,52,63,185,68,12,63,43,162,35,63,58,246,31,63,25,178,12,63,124,161,241,62,186,206,204,62,172,60,38,63,78,169,234,62,156,255,146,63,199,70,160,63,43,198,143,63,166,115,29,63,101,231,8,63,48,1,242,62,179,230,6,63,72,10,219,62,76,150,140,62,18,20,198,62,250,52,214,62,26,228,177,62,38,72,161,62,112,49,104,63,14,204,67,63,34,58,219,62,97,41,12,63,102,178,211,62,108,253,240,62,248,236,232,62,204,255,237,62,150,32,234,62,214,241,246,62,56,232,238,62,238,231,247,62,210,196,205,62,12,14,220,62,74,235,237,62,0,238,27,63,174,45,252,62,204,122,83,62,160,70,194,61,252,205,47,62,128,63,203,61,124,127,8,62,12,152,0,62,16,193,0,62,24,170,195,61,176,24,229,61,224,128,12,62,20,66,28,62,96,224,184,61,188,252,34,62,128,50,111,62,16,223,192,62,254,24,163,62,32,39,94,63,224,20,71,63,128,232,80,63,19,199,92,63,190,67,78,63,37,160,98,63,156,221,88,63,160,29,106,63,246,3,101,63,199,38,93,63,173,102,90,63,42,21,62,63,229,30,31,63,241,111,38,63,11,90,34,63,240,173,76,189,192,222,140,61,40,60,156,62,146,113,172,62,110,8,253,62,88,193,195,62,38,125,17,63,35,34,1,63,13,185,32,63,98,228,19,63,227,19,19,63,29,219,12,63,242,77,217,62,226,249,161,62,6,130,180,62,250,113,183,62,60,223,163,62,34,8,113,63,49,84,27,63,104,185,182,62,40,229,35,62,152,119,150,62,48,166,80,62,210,127,154,62,238,177,131,62,94,142,245,62,51,160,49,63,121,77,47,63,132,36,57,63,77,115,28,63,130,21,4,63,86,167,248,62,240,95,139,61,124,229,32,63,36,187,128,62,32,206,161,61,16,230,140,189,224,206,85,61,0,23,183,187,208,0,92,61,192,45,154,60,80,215,64,62,176,10,230,62,58,48,220,62,206,52,243,62,90,74,187,62,170,187,159,62,126,76,144,62,68,190,47,63,177,112,138,63,134,223,123,63,75,112,98,63,241,161,113,63,145,136,99,63,33,96,81,63,56,178,91,63,87,124,54,63,18,73,54,63,55,10,60,63,76,104,75,63,146,21,73,63,150,127,83,63,74,177,49,63,35,38,42,63,78,203,145,62,68,26,116,63,128,79,43,63,237,173,0,63,99,52,24,63,48,62,211,62,126,252,198,62,68,137,191,62,88,68,123,62,182,245,149,62,42,220,164,62,14,44,208,62,150,135,196,62,172,160,219,62,242,54,200,62,214,172,195,62,214,22,145,63,40,254,132,63,103,181,51,63,221,204,30,63,166,245,49,63,10,7,249,62,94,252,29,63,100,239,31,63,224,58,23,63,247,205,43,63,62,119,59,63,96,72,52,63,29,70,16,63,224,16,30,63,236,55,44,63,132,162,36,63,16,224,129,63,151,184,70,63,208,79,97,62,188,218,123,62,150,108,138,62,64,238,12,62,174,33,129,62,4,73,134,62,8,165,116,62,4,96,151,62,186,141,194,62,170,19,187,62,96,34,131,62,242,134,145,62,230,145,206,62,230,122,189,62,225,96,34,63,63,119,118,63,208,127,5,63,192,232,185,188,166,199,15,63,174,29,57,63,80,229,61,63,212,199,104,63,28,86,121,63,114,205,71,63,8,87,45,63,103,158,34,63,6,157,238,62,200,68,22,63,235,82,43,63,253,62,25,63,86,56,204,62,110,34,51,63,164,56,109,62,144,104,131,190,84,125,137,62,122,150,229,62,130,232,229,62,210,77,48,63,241,50,69,63,207,177,21,63,236,113,232,62,226,211,209,62,120,24,132,62,242,222,172,62,84,114,243,62,25,113,2,63,70,129,227,62,41,230,1,64,71,44,40,63,159,220,36,63,178,196,36,63,75,253,12,63,88,9,28,63,91,77,27,63,101,231,8,63,98,129,129,62,28,136,227,62,240,54,51,63,234,113,83,63,45,192,23,63,78,0,2,63,38,57,226,62,200,234,120,62,72,233,244,63,174,167,190,62,226,188,192,62,26,102,198,62,160,117,164,62,142,53,196,62,152,20,229,62,116,159,186,62,240,183,166,61,42,239,140,62,32,242,237,62,210,119,41,63,20,96,220,62,30,246,160,62,238,135,138,62,242,92,121,63,32,90,137,63,9,110,121,63,109,237,104,63,165,1,114,63,106,85,119,63,91,85,109,63,52,225,118,63,81,187,127,63,212,115,118,63,162,82,111,63,215,141,124,63,152,161,112,63,36,168,121,63,243,19,88,63,101,197,97,63,83,3,109,63,126,146,132,63,87,170,88,63,31,150,79,63,169,210,86,63,174,75,91,63,29,162,84,63,183,88,99,63,226,12,107,63,219,243,93,63,29,162,84,63,22,76,102,63,132,124,84,63,224,1,95,63,66,53,56,63,242,88,80,63,32,162,8,63,192,78,246,62,192,216,192,190,128,188,246,189,0,0,184,189,0,80,232,187,0,101,232,61,192,251,8,62,224,113,191,62,96,18,197,62,192,18,216,62,144,93,10,63,192,193,5,63,224,223,12,63,64,6,8,63,160,149,225,62,0,202,53,62,128,246,43,62,0,98,138,190,0,51,11,190,64,187,20,190,0,252,181,189,0,66,210,188,0,144,27,187,0,247,219,61,128,153,18,62,192,255,10,62,64,118,81,62,64,140,137,62,224,79,174,62,96,81,164,62,128,251,24,62,96,128,61,63,128,172,171,61,128,12,38,63,128,80,29,63,192,172,59,63,144,226,55,63,32,98,62,63,128,70,67,63,208,239,67,63,176,145,71,63,176,5,87,63,96,221,86,63,144,108,82,63,176,86,63,63,16,9,43,63,16,42,38,63,64,242,145,62,0,224,94,189,0,222,245,188,0,172,167,60,0,187,6,61,0,100,113,61,128,27,163,61,128,58,243,61,64,56,7,62,0,154,29,62,64,62,96,62,192,179,146,62,32,68,152,62,64,218,133,62,0,119,119,62,128,185,120,62,16,237,28,63,224,229,58,63,0,92,84,62,160,38,0,63,64,69,18,63,96,153,9,63,176,26,33,63,32,92,16,63,16,131,61,63,16,195,50,63,160,5,239,62,160,124,43,63,240,55,96,63,224,43,94,63,224,43,94,63,32,245,71,63,96,229,152,62,128,103,167,62,0,248,29,60,128,100,56,62,0,88,125,62,0,161,97,62,64,2,154,62,0,235,136,62,224,140,226,62,192,43,207,62,0,90,83,62,192,147,216,62,192,73,31,63,80,78,40,63,64,123,45,63,128,18,41,63,96,206,57,63,192,228,1,63,32,27,202,190,240,133,6,63,24,47,135,63,192,122,120,63,208,3,121,63,80,40,107,63,32,136,81,63,80,206,104,63,48,82,93,63,208,122,73,63,32,128,34,63,160,44,3,63,32,183,145,62,32,139,166,62,128,123,220,62,128,135,95,62,128,1,251,190,0,161,54,62,16,65,71,63,0,25,55,63,208,141,61,63,112,236,25,63,16,201,10,63,240,117,41,63,144,182,33,63,80,71,15,63,224,92,202,62,192,165,182,62,192,29,26,62,192,28,4,62,160,142,157,62,96,56,130,62,160,32,145,62,0,58,7,63,32,248,8,63,160,33,253,62,192,134,231,62,224,4,158,62,192,248,114,62,128,207,167,61,0,227,13,190,0,193,173,189,0,6,28,189,0,39,244,61,160,72,165,62,192,66,154,62,0,82,104,61,0,74,161,60,128,194,139,61,128,76,87,62,64,30,123,62,0,4,83,62,128,234,37,62,128,150,160,61,0,89,43,61,0,24,80,189,64,167,96,190,0,109,40,190,128,115,11,190,0,234,251,188,0,58,24,62,192,74,113,62,32,169,224,62,112,136,18,63,160,96,29,63,0,83,127,63,248,15,149,63,104,78,152,63,120,46,132,63,128,163,49,63,16,63,27,63,32,242,239,62,192,232,237,62,96,167,250,62,144,191,16,63,96,185,25,63,144,47,30,63,112,215,36,63,0,153,7,62,64,110,120,62,224,94,160,62,224,104,60,63,240,148,121,63,192,28,116,63,192,126,79,63,32,227,210,62,32,72,154,62,64,110,77,62,0,187,110,62,224,204,129,62,224,204,172,62,224,22,210,62,128,17,210,62,128,231,231,62,80,202,59,63,224,155,107,63,160,109,248,62,240,92,93,63,16,254,58,63,48,24,64,63,48,5,33,63,224,166,48,63,48,97,36,63,176,183,4,63,64,148,227,62,64,52,136,62,192,116,91,62,64,106,118,62,192,166,247,62,0,74,15,63,224,236,188,62,0,84,254,62,0,246,240,61,208,68,3,63,0,164,165,62,192,108,175,62,128,140,119,62,0,129,169,62,128,166,134,62,64,50,90,62,0,26,8,62,0,2,64,61,0,76,6,188,0,240,111,60,128,230,121,62,160,133,174,62,208,73,113,63,64,181,117,63,160,182,29,63,48,129,52,63,80,111,78,63,192,4,104,63,112,49,125,63,40,127,128,63,24,84,132,63,64,3,114,63,192,161,118,63,224,140,78,63,32,154,47,63,64,18,100,63,48,193,127,63,160,146,129,63,80,137,48,63,192,42,37,63,96,77,162,62,0,141,218,62,128,13,17,63,80,179,69,63,96,116,98,63,0,250,103,63,128,125,116,63,112,215,79,63,240,47,92,63,16,237,28,63,224,201,1,63,64,223,52,63,112,74,73,63,224,210,70,63,64,108,16,63,0,231,192,189,0,42,41,61,128,102,57,62,32,32,177,62,96,183,215,62,32,85,225,62,128,42,10,63,224,143,15,63,48,136,34,63,64,170,47,63,48,98,58,63,128,9,58,63,48,13,37,63,128,70,24,63,32,41,12,63,192,68,67,62,0,161,84,189,0,20,121,189,0,160,246,186,0,231,28,61,0,129,20,61,0,9,89,61,0,220,141,61,128,48,195,61,192,249,7,62,128,102,14,62,64,4,67,62,0,236,113,62,0,90,83,62,0,183,108,62,64,168,106,62,0,122,125,63,128,127,117,63,128,183,102,63,80,66,77,63,160,152,100,63,192,232,89,63,224,6,97,63,96,30,98,63,80,28,101,63,160,121,106,63,112,232,109,63,160,78,106,63,112,187,108,63,176,23,96,63,128,126,95,63,32,130,78,63,32,153,216,62,0,74,62,189,0,136,149,60,128,132,237,61,0,148,112,62,192,81,140,62,32,240,152,62,128,96,185,62,64,223,200,62,160,93,240,62,240,45,5,63,112,32,9,63,80,112,14,63,192,72,9,63,128,87,245,62,96,51,1,63,112,129,122,63,192,205,97,63,128,3,203,62,0,66,245,62,0,19,200,62,64,208,214,62,128,112,150,62,0,123,209,62,192,89,187,62,128,95,206,62,128,109,213,62,144,202,0,63,128,151,0,63,80,24,13,63,80,16,9,63,240,106,14,63,64,199,40,63,96,53,150,62,0,121,102,61,192,198,3,62,0,76,155,61,128,60,244,61,0,120,80,61,128,181,240,61,128,24,140,61,0,127,202,61,0,58,189,61,0,83,58,62,64,59,73,62,0,44,103,62,128,38,156,62,192,64,153,62,96,71,54,63,0,231,72,63,208,73,27,63,64,61,57,63,192,142,44,63,80,76,39,63,96,49,191,62,128,44,245,62,32,214,225,62,64,88,49,63,112,181,137,63,176,180,142,63,216,18,137,63,240,190,99,63,224,226,35,63,144,118,1,63,192,145,215,62,64,223,243,62,96,83,165,62,192,217,208,62,128,212,200,62,224,177,180,62,192,235,0,62,0,26,94,62,128,12,98,62,64,207,235,62,80,61,96,63,240,222,115,63,240,102,98,63,0,60,51,63,224,148,230,62,160,98,178,62,64,131,6,63,192,242,8,63,112,32,52,63,0,192,31,63,16,126,37,63,64,247,64,63,144,198,84,63,64,194,59,63,96,109,178,62,128,24,61,62,128,24,183,61,32,170,203,62,192,104,68,63,160,39,108,63,80,192,97,63,160,205,62,63,224,124,132,62,32,65,129,62,128,191,211,62,64,57,160,62,32,69,174,62,32,7,229,62,112,116,8,63,128,115,216,62,128,57,221,61,0,80,146,187,0,229,148,189,192,45,34,62,176,189,7,63,224,59,59,63,128,110,44,63,96,38,16,63,128,43,75,63,16,232,90,63,240,191,121,63,128,52,101,63,112,64,111,63,224,96,56,63,32,189,86,63,112,78,75,63,64,77,65,63,16,28,74,63,16,234,91,63,240,7,72,63,160,44,89,63,224,127,93,63,224,209,91,63,64,95,117,63,32,209,244,62,192,70,242,62,112,53,84,63,176,20,30,63,160,238,57,63,160,71,186,62,80,239,13,63,32,207,243,62,224,179,224,62,192,140,0,63,176,35,16,63,128,149,233,62,0,224,4,63,160,0,24,63,80,183,28,63,64,133,50,63,232,69,137,63,152,193,133,63,240,4,92,63,160,170,66,63,128,166,72,63,0,75,80,63,64,38,67,63,208,32,28,63,112,172,36,63,224,183,35,63,128,116,47,63,0,123,61,63,144,109,61,63,192,231,67,63,144,123,68,63,240,71,61,63,160,47,112,63,16,140,87,63,0,21,158,62,32,91,185,62,192,163,181,62,224,36,217,62,0,83,146,62,128,123,89,62,0,64,113,62,224,17,143,62,32,221,164,62,96,151,199,62,96,155,201,62,160,199,207,62,64,126,216,62,32,20,214,62,128,134,131,63,16,10,140,63,88,26,130,63,128,230,104,63,144,168,112,63,0,203,101,63,32,229,106,63,128,220,99,63,96,89,106,63,144,2,115,63,32,37,128,63,176,160,132,63,248,153,132,63,208,153,110,63,144,189,101,63,80,149,97,63,88,151,128,63,176,2,139,63,96,189,113,63,80,81,63,63,112,160,73,63,32,182,61,63,96,1,62,63,96,57,47,63,160,195,57,63,224,117,88,63,80,157,101,63,240,171,111,63,144,195,104,63,240,156,82,63,16,135,63,63,112,120,53,63,0,204,97,62,0,60,84,188,0,35,199,61,128,130,236,61,0,240,194,61,0,238,28,62,0,231,3,62,128,47,51,62,64,239,34,62,192,157,90,62,0,174,125,62,0,231,134,62,32,74,155,62,32,141,167,62,32,88,162,62,64,104,162,62,0,80,87,59,0,187,54,189,0,46,233,60,0,184,126,60,0,200,206,187,0,36,185,60,0,132,14,60,0,180,214,60,0,122,142,60,0,170,19,61,0,47,22,61,0,104,176,60,0,212,40,61,128,129,214,61,64,214,0,62,0,202,121,61,128,38,25,62,32,184,167,62,32,29,92,63,48,76,47,63,64,77,65,63,80,245,16,63,16,107,49,63,0,172,64,63,48,227,58,63,16,125,58,63,16,48,41,63,96,188,5,63,224,210,218,62,32,98,19,63,160,214,236,62,240,41,3,63,0,68,16,189,0,173,47,189,96,71,159,62,64,56,138,62,96,91,169,62,192,227,82,62,128,208,110,62,224,16,164,62,128,188,145,62,128,197,171,62,128,189,122,62,64,10,27,62,0,157,217,61,32,202,133,62,192,112,89,62,128,161,153,62,64,52,31,63,128,117,26,63,192,9,233,62,224,225,161,62,96,174,146,62,96,152,30,63,240,251,65,63,192,203,128,63,96,55,89,63,80,131,45,63,16,219,62,63,128,225,185,62,64,90,110,62,240,106,14,63,160,196,227,62,192,232,194,62,0,102,134,62,224,48,137,62,192,97,60,62,0,150,9,61,0,232,240,60,224,156,148,62,128,232,253,62,160,100,74,63,176,41,19,63,96,51,192,62,160,152,248,62,0,40,223,61,0,172,20,61,96,252,185,62,96,70,137,62,64,17,140,62,224,217,52,63,64,232,226,62,48,73,67,63,16,39,58,63,48,253,71,63,64,218,71,63,160,23,100,63,112,87,101,63,80,165,105,63,208,96,103,63,96,179,108,63,240,99,118,63,192,38,121,63,240,243,61,63,192,142,1,63,240,215,4,63,224,255,176,62,0,124,116,188,128,136,162,62,32,87,183,62,128,74,217,62,96,232,218,62,16,182,22,63,112,217,37,63,192,206,33,63,0,169,41,63,240,215,47,63,192,90,61,63,240,79,65,63,80,12,7,63,192,115,157,62,192,232,194,62,0,24,224,62,160,29,251,62,208,83,32,63,112,17,23,63,0,217,213,62,0,114,181,60,128,38,37,190,128,250,100,190,0,205,222,189,0,128,19,187,0,110,215,61,96,91,169,62,192,98,213,62,192,225,255,62,0,222,237,62,240,217,5,63,0,139,251,61,128,31,43,62,32,21,150,62,96,142,130,62,0,5,19,62,0,92,230,189,128,111,95,190,192,110,139,190,128,30,33,190,0,146,171,189,0,89,5,189,128,205,209,61,128,128,70,62,96,170,144,62,64,31,102,62,224,111,147,62,64,46,28,63,0,63,74,63,16,71,117,63,48,100,102,63,160,127,109,63,128,219,120,63,160,34,127,63,144,137,118,63,64,9,117,63,208,51,102,63,224,70,86,63,128,230,61,63,32,170,55,63,96,191,28,63,16,183,44,63,208,250,51,63,0,245,175,61,0,54,187,61,16,149,27,63,240,16,12,63,240,40,24,63,96,55,46,63,176,3,43,63,128,117,26,63,48,91,33,63,224,143,249,62,224,189,186,62,192,212,141,62,32,67,130,62,160,137,133,62,32,147,170,62,0,125,253,62,64,108,207,62,120,21,141,63,16,132,83,63,64,70,40,63,48,73,24,63,80,233,10,63,192,96,255,62,0,194,223,62,128,92,226,62,128,118,196,62,32,230,190,62,64,201,189,62,160,125,213,62,0,69,182,62,128,75,153,62,128,124,199,62,128,208,146,61,112,230,108,63,128,96,142,62,128,234,123,62,0,139,43,62,0,109,28,62,0,229,2,62,0,53,251,61,0,156,238,61,0,39,201,61,128,5,195,61,0,7,228,61,128,124,25,62,0,150,192,61,128,115,164,61,192,211,31,62,48,213,51,63,192,131,60,63,48,132,118,63,208,169,118,63,168,125,138,63,8,149,147,63,80,51,166,63,64,121,162,63,136,118,164,63,152,212,164,63,176,77,155,63,136,234,136,63,120,17,139,63,208,52,124,63,240,203,84,63,128,6,78,63,64,172,153,62,128,196,104,62,0,194,32,63,176,144,49,63,0,73,79,63,64,173,113,63,248,42,141,63,96,156,150,63,80,91,143,63,176,149,148,63,192,133,136,63,16,35,99,63,192,133,104,63,224,159,66,63,0,122,39,63,16,84,59,63,0,200,131,61,240,78,46,191,64,246,147,62,176,61,29,63,64,187,34,63,192,189,46,63,80,62,32,63,32,55,253,62,176,47,22,63,160,192,34,63,240,88,5,63,128,113,215,62,96,55,3,63,32,105,192,62,224,219,10,63,144,4,30,63,0,107,130,189,16,49,66,191,128,49,174,61,32,113,153,62,128,96,185,62,128,137,227,62,192,99,235,62,96,200,159,62,192,168,205,62,176,175,0,63,192,135,210,62,192,254,162,62,128,186,187,62,192,95,59,62,32,98,167,62,32,182,209,62,160,127,109,63,160,18,119,63,32,208,117,63,48,202,110,63,32,188,107,63,48,8,99,63,32,178,102,63,0,97,91,63,80,202,102,63,0,160,101,63,48,204,111,63,208,202,113,63,192,152,92,63,176,81,82,63,176,87,85,63,80,62,75,63,64,9,48,62,128,253,233,61,0,18,255,61,192,143,40,62,128,63,16,62,128,132,194,61,0,196,222,60,0,186,217,60,0,208,210,187,0,164,50,188,0,88,121,60,0,250,206,60,0,196,136,60,0,195,150,61,128,236,246,61,192,23,66,62,80,175,24,63,112,68,27,63,48,10,57,63,160,29,60,63,0,17,147,61,128,173,114,62,192,137,123,62,96,3,254,62,80,27,36,63,96,53,45,63,80,88,45,63,32,133,58,63,96,178,43,63,176,179,2,63,208,193,1,63,48,4,11,63,0,118,142,62,128,37,134,62,128,135,226,62,96,46,211,62,128,84,237,189,0,142,152,60,0,88,196,59,64,207,61,62,224,181,182,62,224,33,194,62,160,246,209,62,64,84,238,62,128,69,236,62,192,86,164,62,0,203,163,62,32,113,196,62,176,30,78,63,32,195,89,63,224,87,116,63,176,246,14,63,16,96,22,63,240,157,18,63,128,39,30,63,112,21,68,63,240,222,115,63,72,110,133,63,24,8,137,63,152,140,128,63,16,188,25,63,224,0,199,62,224,172,242,62,176,124,39,63,128,128,244,62,48,223,13,63,112,122,54,63,128,213,91,62,64,36,128,62,0,219,126,62,96,18,154,62,64,0,239,62,96,104,49,63,224,39,92,63,240,227,96,63,128,19,63,63,224,188,164,62,0,143,2,62,32,175,141,62,16,15,3,63,176,10,25,63,96,96,2,63,152,115,137,63,64,212,68,63,80,76,82,63,64,169,68,63,0,127,254,62,192,128,142,62,128,211,135,62,160,155,185,62,64,239,17,63,144,32,1,63,96,247,204,62,64,41,4,63,160,160,18,63,176,201,13,63,64,232,140,62,192,249,50,62,96,16,91,63,64,46,219,62,160,173,3,63,64,245,211,62,64,113,57,62,0,120,51,60,0,220,1,61,128,131,172,61,64,57,160,62,160,223,133,62,192,41,32,62,0,234,112,62,128,101,166,62,128,127,179,62,176,152,53,63,32,63,66,63,136,6,237,63,48,47,129,63,16,208,78,63,176,25,97,63,112,49,82,63,64,45,92,63,224,252,48,63,80,199,36,63,208,38,31,63,192,196,28,63,112,19,24,63,240,81,23,63,128,141,38,63,176,129,20,63,32,151,172,62,0,183,239,62,200,56,246,63,32,44,78,63,80,57,8,63,48,93,34,63,112,102,1,63,96,46,20,63,192,79,225,62,224,63,209,62,0,234,200,62,192,18,216,62,160,91,196,62,32,153,216,62,176,226,4,63,192,80,204,62,224,177,32,63,88,93,142,63,112,83,131,63,64,218,114,63,64,32,107,63,64,239,103,63,240,114,104,63,16,5,84,63,112,18,88,63,96,238,73,63,96,46,63,63,16,183,44,63,176,198,33,63,0,235,31,63,0,244,57,63,0,35,60,63,64,153,120,62,120,230,138,63,160,55,30,63,48,110,21,63,96,109,221,62,160,220,239,62,128,194,191,62,224,254,154,62,128,184,186,62,128,181,118,62,128,2,93,62,192,55,82,62,128,33,87,62,128,26,105,62,96,144,174,62,96,38,207,62,160,210,86,63,80,16,95,63,224,124,145,63,112,113,146,63,216,122,146,63,32,59,139,63,72,155,134,63,8,70,129,63,48,239,107,63,16,41,102,63,240,110,102,63,48,57,102,63,224,54,78,63,16,169,80,63,32,47,58,63,144,56,56,63,224,76,237,62,0,170,20,63,56,124,144,63,240,167,141,63,240,202,137,63,208,194,109,63,80,71,101,63,16,120,77,63,0,46,44,63,48,239,21,63,32,129,13,63,0,181,4,63,128,231,231,62,112,231,1,63,0,50,237,62,48,53,14,63,226,232,249,62,106,157,76,190,169,69,198,190,96,71,51,60,40,176,38,61,210,34,55,62,96,100,43,62,175,148,174,62,253,238,207,62,130,169,5,63,154,205,24,62,208,134,12,190,175,103,137,190,72,192,126,189,40,211,127,189,128,103,223,187,128,44,249,187,240,79,139,61,220,55,216,61,236,190,245,61,123,30,75,63,0,239,162,58,109,15,217,62,148,88,13,63,184,83,38,63,176,114,36,63,155,142,55,63,79,138,55,63,75,32,71,63,178,246,86,63,58,187,141,62,64,85,73,189,104,107,5,189,48,49,214,60,40,117,64,61,12,1,133,61,164,29,160,61,144,64,211,61,12,172,244,61,170,12,123,62,122,161,56,63,62,217,41,62,224,100,38,60,49,72,16,63,162,166,168,63,46,120,152,63,21,55,144,63,202,179,82,63,228,67,92,63,189,58,79,63,211,84,187,62,176,58,167,61,74,71,86,190,32,79,71,62,197,246,138,63,55,251,114,63,153,155,88,63,31,245,4,63,246,248,24,63,242,129,7,63,76,98,115,63,106,105,104,63,251,151,96,63,236,36,94,63,227,106,77,63,124,17,80,63,221,26,83,63,163,190,96,63,104,6,114,63,187,130,124,63,185,57,48,63,24,165,48,63,195,184,52,63,201,192,39,63,99,149,21,63,8,43,14,63,113,185,22,63,138,66,38,63,178,200,69,63,199,126,71,63,120,191,117,62,248,128,70,62,176,109,227,62,197,35,229,62,148,109,156,62,246,180,50,62,232,130,240,61,148,45,139,61,0,64,160,61,78,155,45,62,96,145,139,60,240,191,207,60,160,49,84,62,134,89,67,62,36,138,224,61,120,240,5,61,32,38,92,188,48,252,60,189,40,191,24,189,176,49,199,188,173,179,11,63,58,69,193,62,254,7,6,63,185,78,153,62,8,54,117,62,244,182,18,63,26,67,127,63,155,20,149,63,181,30,103,63,255,27,71,63,236,86,106,62,220,252,241,61,42,101,84,62,96,123,17,61,0,88,35,187,176,240,132,62,190,91,63,63,159,12,105,63,110,191,23,63,143,95,244,62,198,119,39,63,173,41,36,63,72,51,67,63,210,89,72,63,34,195,247,62,53,140,169,62,201,95,234,62,189,117,91,63,25,185,113,63,97,11,84,63,186,6,1